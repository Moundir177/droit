# DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
"""References another document, used as a foreign key"""
scalar Reference

""""""
scalar JSON

type SystemInfo {
  filename: String!
  title: String
  basename: String!
  hasReferences: Boolean
  breadcrumbs(excludeExtension: Boolean): [String!]!
  path: String!
  relativePath: String!
  extension: String!
  template: String!
  collection: Collection!
}

type Folder {
  name: String!
  path: String!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

""""""
interface Node {
  id: ID!
}

""""""
interface Document {
  id: ID!
  _sys: SystemInfo
  _values: JSON!
}

"""A relay-compliant pagination connection"""
interface Connection {
  totalCount: Float!
  pageInfo: PageInfo!
}

type Query {
  getOptimizedQuery(queryString: String!): String
  collection(collection: String): Collection!
  collections: [Collection!]!
  node(id: String): Node!
  document(collection: String, relativePath: String): DocumentNode!
  news(relativePath: String): News!
  newsConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: NewsFilter): NewsConnection!
  mission(relativePath: String): Mission!
  missionConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: MissionFilter): MissionConnection!
}

input DocumentFilter {
  news: NewsFilter
  mission: MissionFilter
}

type DocumentConnectionEdges {
  cursor: String!
  node: DocumentNode
}

type DocumentConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [DocumentConnectionEdges]
}

type Collection {
  name: String!
  slug: String!
  label: String
  path: String!
  format: String
  matches: String
  templates: [JSON]
  fields: [JSON]
  documents(before: String, after: String, first: Float, last: Float, sort: String, filter: DocumentFilter, folder: String): DocumentConnection!
}

union DocumentNode = News | Mission | Folder

type News implements Node & Document {
  title_fr: String!
  title_ar: String!
  date: String!
  author_fr: String
  author_ar: String
  category_fr: String
  category_ar: String
  image: String
  body_fr: JSON
  body_ar: JSON
  excerpt_fr: String
  excerpt_ar: String
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input StringFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input DatetimeFilter {
  after: String
  before: String
  eq: String
  exists: Boolean
  in: [String]
}

input ImageFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input RichTextFilter {
  startsWith: String
  eq: String
  exists: Boolean
}

input NewsFilter {
  title_fr: StringFilter
  title_ar: StringFilter
  date: DatetimeFilter
  author_fr: StringFilter
  author_ar: StringFilter
  category_fr: StringFilter
  category_ar: StringFilter
  image: ImageFilter
  body_fr: RichTextFilter
  body_ar: RichTextFilter
  excerpt_fr: StringFilter
  excerpt_ar: StringFilter
}

type NewsConnectionEdges {
  cursor: String!
  node: News
}

type NewsConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [NewsConnectionEdges]
}

type MissionPoints {
  text_fr: String
  text_ar: String
}

type Mission implements Node & Document {
  title_fr: String
  title_ar: String
  description_fr: String
  description_ar: String
  points: [MissionPoints]
  image: String
  image_title_fr: String
  image_title_ar: String
  image_description_fr: String
  image_description_ar: String
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input MissionPointsFilter {
  text_fr: StringFilter
  text_ar: StringFilter
}

input MissionFilter {
  title_fr: StringFilter
  title_ar: StringFilter
  description_fr: StringFilter
  description_ar: StringFilter
  points: MissionPointsFilter
  image: ImageFilter
  image_title_fr: StringFilter
  image_title_ar: StringFilter
  image_description_fr: StringFilter
  image_description_ar: StringFilter
}

type MissionConnectionEdges {
  cursor: String!
  node: Mission
}

type MissionConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [MissionConnectionEdges]
}

type Mutation {
  addPendingDocument(collection: String!, relativePath: String!, template: String): DocumentNode!
  updateDocument(collection: String, relativePath: String!, params: DocumentUpdateMutation!): DocumentNode!
  deleteDocument(collection: String, relativePath: String!): DocumentNode!
  createDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  createFolder(collection: String, relativePath: String!): DocumentNode!
  updateNews(relativePath: String!, params: NewsMutation!): News!
  createNews(relativePath: String!, params: NewsMutation!): News!
  updateMission(relativePath: String!, params: MissionMutation!): Mission!
  createMission(relativePath: String!, params: MissionMutation!): Mission!
}

input DocumentUpdateMutation {
  news: NewsMutation
  mission: MissionMutation
  relativePath: String
}

input DocumentMutation {
  news: NewsMutation
  mission: MissionMutation
}

input NewsMutation {
  title_fr: String
  title_ar: String
  date: String
  author_fr: String
  author_ar: String
  category_fr: String
  category_ar: String
  image: String
  body_fr: JSON
  body_ar: JSON
  excerpt_fr: String
  excerpt_ar: String
}

input MissionPointsMutation {
  text_fr: String
  text_ar: String
}

input MissionMutation {
  title_fr: String
  title_ar: String
  description_fr: String
  description_ar: String
  points: [MissionPointsMutation]
  image: String
  image_title_fr: String
  image_title_ar: String
  image_description_fr: String
  image_description_ar: String
}

schema {
  query: Query
  mutation: Mutation
}
