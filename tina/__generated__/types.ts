//@ts-nocheck
  // DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
  export function gql(strings: TemplateStringsArray, ...args: string[]): string {
    let str = ''
    strings.forEach((string, i) => {
      str += string + (args[i] || '')
    })
    return str
  }
  export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = { [_ in K]?: never };
export type Incremental<T> = T | { [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: { input: string; output: string; }
  String: { input: string; output: string; }
  Boolean: { input: boolean; output: boolean; }
  Int: { input: number; output: number; }
  Float: { input: number; output: number; }
  /** References another document, used as a foreign key */
  Reference: { input: any; output: any; }
  JSON: { input: any; output: any; }
};

export type SystemInfo = {
  __typename?: 'SystemInfo';
  filename: Scalars['String']['output'];
  title?: Maybe<Scalars['String']['output']>;
  basename: Scalars['String']['output'];
  hasReferences?: Maybe<Scalars['Boolean']['output']>;
  breadcrumbs: Array<Scalars['String']['output']>;
  path: Scalars['String']['output'];
  relativePath: Scalars['String']['output'];
  extension: Scalars['String']['output'];
  template: Scalars['String']['output'];
  collection: Collection;
};


export type SystemInfoBreadcrumbsArgs = {
  excludeExtension?: InputMaybe<Scalars['Boolean']['input']>;
};

export type Folder = {
  __typename?: 'Folder';
  name: Scalars['String']['output'];
  path: Scalars['String']['output'];
};

export type PageInfo = {
  __typename?: 'PageInfo';
  hasPreviousPage: Scalars['Boolean']['output'];
  hasNextPage: Scalars['Boolean']['output'];
  startCursor: Scalars['String']['output'];
  endCursor: Scalars['String']['output'];
};

export type Node = {
  id: Scalars['ID']['output'];
};

export type Document = {
  id: Scalars['ID']['output'];
  _sys?: Maybe<SystemInfo>;
  _values: Scalars['JSON']['output'];
};

/** A relay-compliant pagination connection */
export type Connection = {
  totalCount: Scalars['Float']['output'];
  pageInfo: PageInfo;
};

export type Query = {
  __typename?: 'Query';
  getOptimizedQuery?: Maybe<Scalars['String']['output']>;
  collection: Collection;
  collections: Array<Collection>;
  node: Node;
  document: DocumentNode;
  news: News;
  newsConnection: NewsConnection;
  mission: Mission;
  missionConnection: MissionConnection;
};


export type QueryGetOptimizedQueryArgs = {
  queryString: Scalars['String']['input'];
};


export type QueryCollectionArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
};


export type QueryNodeArgs = {
  id?: InputMaybe<Scalars['String']['input']>;
};


export type QueryDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryNewsArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryNewsConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<NewsFilter>;
};


export type QueryMissionArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryMissionConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<MissionFilter>;
};

export type DocumentFilter = {
  news?: InputMaybe<NewsFilter>;
  mission?: InputMaybe<MissionFilter>;
};

export type DocumentConnectionEdges = {
  __typename?: 'DocumentConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<DocumentNode>;
};

export type DocumentConnection = Connection & {
  __typename?: 'DocumentConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<DocumentConnectionEdges>>>;
};

export type Collection = {
  __typename?: 'Collection';
  name: Scalars['String']['output'];
  slug: Scalars['String']['output'];
  label?: Maybe<Scalars['String']['output']>;
  path: Scalars['String']['output'];
  format?: Maybe<Scalars['String']['output']>;
  matches?: Maybe<Scalars['String']['output']>;
  templates?: Maybe<Array<Maybe<Scalars['JSON']['output']>>>;
  fields?: Maybe<Array<Maybe<Scalars['JSON']['output']>>>;
  documents: DocumentConnection;
};


export type CollectionDocumentsArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<DocumentFilter>;
  folder?: InputMaybe<Scalars['String']['input']>;
};

export type DocumentNode = News | Mission | Folder;

export type News = Node & Document & {
  __typename?: 'News';
  title_fr: Scalars['String']['output'];
  title_ar: Scalars['String']['output'];
  date: Scalars['String']['output'];
  author_fr?: Maybe<Scalars['String']['output']>;
  author_ar?: Maybe<Scalars['String']['output']>;
  category_fr?: Maybe<Scalars['String']['output']>;
  category_ar?: Maybe<Scalars['String']['output']>;
  image?: Maybe<Scalars['String']['output']>;
  body_fr?: Maybe<Scalars['JSON']['output']>;
  body_ar?: Maybe<Scalars['JSON']['output']>;
  excerpt_fr?: Maybe<Scalars['String']['output']>;
  excerpt_ar?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type StringFilter = {
  startsWith?: InputMaybe<Scalars['String']['input']>;
  eq?: InputMaybe<Scalars['String']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type DatetimeFilter = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  eq?: InputMaybe<Scalars['String']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type ImageFilter = {
  startsWith?: InputMaybe<Scalars['String']['input']>;
  eq?: InputMaybe<Scalars['String']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type RichTextFilter = {
  startsWith?: InputMaybe<Scalars['String']['input']>;
  eq?: InputMaybe<Scalars['String']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
};

export type NewsFilter = {
  title_fr?: InputMaybe<StringFilter>;
  title_ar?: InputMaybe<StringFilter>;
  date?: InputMaybe<DatetimeFilter>;
  author_fr?: InputMaybe<StringFilter>;
  author_ar?: InputMaybe<StringFilter>;
  category_fr?: InputMaybe<StringFilter>;
  category_ar?: InputMaybe<StringFilter>;
  image?: InputMaybe<ImageFilter>;
  body_fr?: InputMaybe<RichTextFilter>;
  body_ar?: InputMaybe<RichTextFilter>;
  excerpt_fr?: InputMaybe<StringFilter>;
  excerpt_ar?: InputMaybe<StringFilter>;
};

export type NewsConnectionEdges = {
  __typename?: 'NewsConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<News>;
};

export type NewsConnection = Connection & {
  __typename?: 'NewsConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<NewsConnectionEdges>>>;
};

export type MissionPoints = {
  __typename?: 'MissionPoints';
  text_fr?: Maybe<Scalars['String']['output']>;
  text_ar?: Maybe<Scalars['String']['output']>;
};

export type Mission = Node & Document & {
  __typename?: 'Mission';
  title_fr?: Maybe<Scalars['String']['output']>;
  title_ar?: Maybe<Scalars['String']['output']>;
  description_fr?: Maybe<Scalars['String']['output']>;
  description_ar?: Maybe<Scalars['String']['output']>;
  points?: Maybe<Array<Maybe<MissionPoints>>>;
  image?: Maybe<Scalars['String']['output']>;
  image_title_fr?: Maybe<Scalars['String']['output']>;
  image_title_ar?: Maybe<Scalars['String']['output']>;
  image_description_fr?: Maybe<Scalars['String']['output']>;
  image_description_ar?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type MissionPointsFilter = {
  text_fr?: InputMaybe<StringFilter>;
  text_ar?: InputMaybe<StringFilter>;
};

export type MissionFilter = {
  title_fr?: InputMaybe<StringFilter>;
  title_ar?: InputMaybe<StringFilter>;
  description_fr?: InputMaybe<StringFilter>;
  description_ar?: InputMaybe<StringFilter>;
  points?: InputMaybe<MissionPointsFilter>;
  image?: InputMaybe<ImageFilter>;
  image_title_fr?: InputMaybe<StringFilter>;
  image_title_ar?: InputMaybe<StringFilter>;
  image_description_fr?: InputMaybe<StringFilter>;
  image_description_ar?: InputMaybe<StringFilter>;
};

export type MissionConnectionEdges = {
  __typename?: 'MissionConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<Mission>;
};

export type MissionConnection = Connection & {
  __typename?: 'MissionConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<MissionConnectionEdges>>>;
};

export type Mutation = {
  __typename?: 'Mutation';
  addPendingDocument: DocumentNode;
  updateDocument: DocumentNode;
  deleteDocument: DocumentNode;
  createDocument: DocumentNode;
  createFolder: DocumentNode;
  updateNews: News;
  createNews: News;
  updateMission: Mission;
  createMission: Mission;
};


export type MutationAddPendingDocumentArgs = {
  collection: Scalars['String']['input'];
  relativePath: Scalars['String']['input'];
  template?: InputMaybe<Scalars['String']['input']>;
};


export type MutationUpdateDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
  params: DocumentUpdateMutation;
};


export type MutationDeleteDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
};


export type MutationCreateDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
  params: DocumentMutation;
};


export type MutationCreateFolderArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
};


export type MutationUpdateNewsArgs = {
  relativePath: Scalars['String']['input'];
  params: NewsMutation;
};


export type MutationCreateNewsArgs = {
  relativePath: Scalars['String']['input'];
  params: NewsMutation;
};


export type MutationUpdateMissionArgs = {
  relativePath: Scalars['String']['input'];
  params: MissionMutation;
};


export type MutationCreateMissionArgs = {
  relativePath: Scalars['String']['input'];
  params: MissionMutation;
};

export type DocumentUpdateMutation = {
  news?: InputMaybe<NewsMutation>;
  mission?: InputMaybe<MissionMutation>;
  relativePath?: InputMaybe<Scalars['String']['input']>;
};

export type DocumentMutation = {
  news?: InputMaybe<NewsMutation>;
  mission?: InputMaybe<MissionMutation>;
};

export type NewsMutation = {
  title_fr?: InputMaybe<Scalars['String']['input']>;
  title_ar?: InputMaybe<Scalars['String']['input']>;
  date?: InputMaybe<Scalars['String']['input']>;
  author_fr?: InputMaybe<Scalars['String']['input']>;
  author_ar?: InputMaybe<Scalars['String']['input']>;
  category_fr?: InputMaybe<Scalars['String']['input']>;
  category_ar?: InputMaybe<Scalars['String']['input']>;
  image?: InputMaybe<Scalars['String']['input']>;
  body_fr?: InputMaybe<Scalars['JSON']['input']>;
  body_ar?: InputMaybe<Scalars['JSON']['input']>;
  excerpt_fr?: InputMaybe<Scalars['String']['input']>;
  excerpt_ar?: InputMaybe<Scalars['String']['input']>;
};

export type MissionPointsMutation = {
  text_fr?: InputMaybe<Scalars['String']['input']>;
  text_ar?: InputMaybe<Scalars['String']['input']>;
};

export type MissionMutation = {
  title_fr?: InputMaybe<Scalars['String']['input']>;
  title_ar?: InputMaybe<Scalars['String']['input']>;
  description_fr?: InputMaybe<Scalars['String']['input']>;
  description_ar?: InputMaybe<Scalars['String']['input']>;
  points?: InputMaybe<Array<InputMaybe<MissionPointsMutation>>>;
  image?: InputMaybe<Scalars['String']['input']>;
  image_title_fr?: InputMaybe<Scalars['String']['input']>;
  image_title_ar?: InputMaybe<Scalars['String']['input']>;
  image_description_fr?: InputMaybe<Scalars['String']['input']>;
  image_description_ar?: InputMaybe<Scalars['String']['input']>;
};

export type NewsPartsFragment = { __typename: 'News', title_fr: string, title_ar: string, date: string, author_fr?: string | null, author_ar?: string | null, category_fr?: string | null, category_ar?: string | null, image?: string | null, body_fr?: any | null, body_ar?: any | null, excerpt_fr?: string | null, excerpt_ar?: string | null };

export type MissionPartsFragment = { __typename: 'Mission', title_fr?: string | null, title_ar?: string | null, description_fr?: string | null, description_ar?: string | null, image?: string | null, image_title_fr?: string | null, image_title_ar?: string | null, image_description_fr?: string | null, image_description_ar?: string | null, points?: Array<{ __typename: 'MissionPoints', text_fr?: string | null, text_ar?: string | null } | null> | null };

export type NewsQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type NewsQuery = { __typename?: 'Query', news: { __typename: 'News', id: string, title_fr: string, title_ar: string, date: string, author_fr?: string | null, author_ar?: string | null, category_fr?: string | null, category_ar?: string | null, image?: string | null, body_fr?: any | null, body_ar?: any | null, excerpt_fr?: string | null, excerpt_ar?: string | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } };

export type NewsConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<NewsFilter>;
}>;


export type NewsConnectionQuery = { __typename?: 'Query', newsConnection: { __typename?: 'NewsConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'NewsConnectionEdges', cursor: string, node?: { __typename: 'News', id: string, title_fr: string, title_ar: string, date: string, author_fr?: string | null, author_ar?: string | null, category_fr?: string | null, category_ar?: string | null, image?: string | null, body_fr?: any | null, body_ar?: any | null, excerpt_fr?: string | null, excerpt_ar?: string | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } | null } | null> | null } };

export type MissionQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type MissionQuery = { __typename?: 'Query', mission: { __typename: 'Mission', id: string, title_fr?: string | null, title_ar?: string | null, description_fr?: string | null, description_ar?: string | null, image?: string | null, image_title_fr?: string | null, image_title_ar?: string | null, image_description_fr?: string | null, image_description_ar?: string | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, points?: Array<{ __typename: 'MissionPoints', text_fr?: string | null, text_ar?: string | null } | null> | null } };

export type MissionConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<MissionFilter>;
}>;


export type MissionConnectionQuery = { __typename?: 'Query', missionConnection: { __typename?: 'MissionConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'MissionConnectionEdges', cursor: string, node?: { __typename: 'Mission', id: string, title_fr?: string | null, title_ar?: string | null, description_fr?: string | null, description_ar?: string | null, image?: string | null, image_title_fr?: string | null, image_title_ar?: string | null, image_description_fr?: string | null, image_description_ar?: string | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, points?: Array<{ __typename: 'MissionPoints', text_fr?: string | null, text_ar?: string | null } | null> | null } | null } | null> | null } };

export const NewsPartsFragmentDoc = gql`
    fragment NewsParts on News {
  __typename
  title_fr
  title_ar
  date
  author_fr
  author_ar
  category_fr
  category_ar
  image
  body_fr
  body_ar
  excerpt_fr
  excerpt_ar
}
    `;
export const MissionPartsFragmentDoc = gql`
    fragment MissionParts on Mission {
  __typename
  title_fr
  title_ar
  description_fr
  description_ar
  points {
    __typename
    text_fr
    text_ar
  }
  image
  image_title_fr
  image_title_ar
  image_description_fr
  image_description_ar
}
    `;
export const NewsDocument = gql`
    query news($relativePath: String!) {
  news(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        hasReferences
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...NewsParts
  }
}
    ${NewsPartsFragmentDoc}`;
export const NewsConnectionDocument = gql`
    query newsConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: NewsFilter) {
  newsConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            hasReferences
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...NewsParts
      }
    }
  }
}
    ${NewsPartsFragmentDoc}`;
export const MissionDocument = gql`
    query mission($relativePath: String!) {
  mission(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        hasReferences
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...MissionParts
  }
}
    ${MissionPartsFragmentDoc}`;
export const MissionConnectionDocument = gql`
    query missionConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: MissionFilter) {
  missionConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            hasReferences
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...MissionParts
      }
    }
  }
}
    ${MissionPartsFragmentDoc}`;
export type Requester<C= {}> = <R, V>(doc: DocumentNode, vars?: V, options?: C) => Promise<R>
  export function getSdk<C>(requester: Requester<C>) {
    return {
      news(variables: NewsQueryVariables, options?: C): Promise<{data: NewsQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: NewsQueryVariables, query: string}> {
        return requester<{data: NewsQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: NewsQueryVariables, query: string}, NewsQueryVariables>(NewsDocument, variables, options);
      },
    newsConnection(variables?: NewsConnectionQueryVariables, options?: C): Promise<{data: NewsConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: NewsConnectionQueryVariables, query: string}> {
        return requester<{data: NewsConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: NewsConnectionQueryVariables, query: string}, NewsConnectionQueryVariables>(NewsConnectionDocument, variables, options);
      },
    mission(variables: MissionQueryVariables, options?: C): Promise<{data: MissionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: MissionQueryVariables, query: string}> {
        return requester<{data: MissionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: MissionQueryVariables, query: string}, MissionQueryVariables>(MissionDocument, variables, options);
      },
    missionConnection(variables?: MissionConnectionQueryVariables, options?: C): Promise<{data: MissionConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: MissionConnectionQueryVariables, query: string}> {
        return requester<{data: MissionConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: MissionConnectionQueryVariables, query: string}, MissionConnectionQueryVariables>(MissionConnectionDocument, variables, options);
      }
    };
  }
  export type Sdk = ReturnType<typeof getSdk>;

// TinaSDK generated code
import { createClient, TinaClient } from "tinacms/dist/client";

const generateRequester = (
  client: TinaClient,
) => {
  const requester: (
    doc: any,
    vars?: any,
    options?: {
      branch?: string,
      /**
       * Aside from `method` and `body`, all fetch options are passed
       * through to underlying fetch request
       */
      fetchOptions?: Omit<Parameters<typeof fetch>[1], 'body' | 'method'>,
    },
    client
  ) => Promise<any> = async (doc, vars, options) => {
    let url = client.apiUrl
    if (options?.branch) {
      const index = client.apiUrl.lastIndexOf('/')
      url = client.apiUrl.substring(0, index + 1) + options.branch
    }
    const data = await client.request({
      query: doc,
      variables: vars,
      url,
    }, options)

    return { data: data?.data, errors: data?.errors, query: doc, variables: vars || {} }
  }

  return requester
}

/**
 * @experimental this class can be used but may change in the future
 **/
export const ExperimentalGetTinaClient = () =>
  getSdk(
    generateRequester(
      createClient({
        url: "http://localhost:4001/graphql",
        queries,
      })
    )
  )

export const queries = (
  client: TinaClient,
) => {
  const requester = generateRequester(client)
  return getSdk(requester)
}

  